(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{209:function(t,e,a){"use strict";a.r(e);var o=a(6),i=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"localdate-localtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localdate-localtime"}},[t._v("#")]),t._v(" LocalDate, LocalTime")]),t._v(" "),a("h2",{attrs:{id:"why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[t._v("#")]),t._v(" Why?")]),t._v(" "),a("p",[t._v("Serves as an alternative / replacement of "),a("a",{attrs:{href:"https://momentjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Moment.js"),a("OutboundLink")],1),t._v(" /\n"),a("a",{attrs:{href:"https://github.com/iamkun/dayjs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Day.js"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("It tries to address the shortcomings of Day.js and\n"),a("a",{attrs:{href:"https://github.com/NaturalCycles/time-lib",target:"_blank",rel:"noopener noreferrer"}},[t._v("time-lib"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("time-lib")]),t._v(" was created as a wrapper around Day.js, due to following limitations:")]),t._v(" "),a("ul",[a("li",[t._v('Day.js doesn\'t provide all features that we need without plugins. This creates an "import\nproblem": you cannot just import '),a("code",[t._v("dayjs")]),t._v(', you need to import it from a place that had plugins\nproperly installed and initialized. It immediately creates an "import ambiguity": should I import\nfrom '),a("code",[t._v("dayjs")]),t._v(" or from "),a("code",[t._v("my_code/dayjs.ts")]),t._v("?")]),t._v(" "),a("li",[t._v("Day.js is created as CommonJS module, all plugins has to be explicitly "),a("code",[t._v("require")]),t._v("d. There are\nissues around TypeScript "),a("code",[t._v("esModuleInterop")]),t._v(". Result of it is that we needed to completely fork\nDay.js types and put it into "),a("code",[t._v("time-lib")]),t._v(".")]),t._v(" "),a("li",[t._v("There are more/deeper ESM issues when it's used in ESM context (e.g with Vite).")])]),t._v(" "),a("p",[t._v("Next level of reasoning is that we needed our own opinionated API that would use standards that we\nuse, for example:")]),t._v(" "),a("ul",[a("li",[t._v("We always use classic Unixtime (in seconds, not milliseconds)")]),t._v(" "),a("li",[t._v("We always use classic ISO8601 date without timezone, e.g "),a("code",[t._v("1984-06-21")])])]),t._v(" "),a("p",[t._v("Just the second/millisecond confusion can create serious bugs.")]),t._v(" "),a("p",[t._v("Mixup between similarly-called "),a("code",[t._v(".toISOString")]),t._v(" and "),a("code",[t._v(".toISODate")]),t._v(" can create very subtle bugs.")]),t._v(" "),a("p",[t._v("So, after multiple issues being accumulated and inability to properly fork Day.js, it was decided to\ntry and simply "),a("strong",[t._v("rewrite")]),t._v(" Day.js functionality into "),a("code",[t._v("LocalDate")]),t._v(" and "),a("code",[t._v("LocalTime")]),t._v(".")]),t._v(" "),a("p",[t._v("Reasons:")]),t._v(" "),a("ul",[a("li",[t._v("No milliseconds in the API (not needed)")]),t._v(" "),a("li",[t._v('Classic UnixTime, never "millisecond unixtime"')]),t._v(" "),a("li",[t._v('No timezone support/confusion, all dates/times are always treated as "local" (inspired by Java\nLocalDate/LocalDateTime)')]),t._v(" "),a("li",[t._v('Ability to parse "timezone-aware ISO8601 string", e.g '),a("code",[t._v("1984-06-21T17:15:02+02")]),t._v(" into a LocalDate of\njust "),a("code",[t._v("1984-06-21")]),t._v(" or LocalTime of "),a("code",[t._v("1984-06-21T17:15:02")]),t._v(" (try achieving it with Moment.js or\nDay.js!)")]),t._v(" "),a("li",[a("code",[t._v(".toJSON")]),t._v(" automatically formats LocalTime as unixtimestamp, LocalDate as ISO8601 date-only string")]),t._v(" "),a("li",[t._v("Prevents "),a("code",[t._v("dayjs(undefined)")]),t._v(" being "),a("code",[t._v("dayjs.now()")])]),t._v(" "),a("li",[t._v("Strict parsing/validation by default. Will validate all input upon creation and will throw parse\nerror on any invalid input. We believe it allows to catch errors sooner.")]),t._v(" "),a("li",[t._v("Optimized for performance and code maintenance, not on code size (as Day.js is, which results in\nits poorer performance in certain cases, and/or in less code maintainability)")]),t._v(" "),a("li",[t._v("No arbitrary "),a("code",[t._v(".format")]),t._v(" by design. List of well-known format outputs instead.")]),t._v(" "),a("li",[t._v("Separate "),a("code",[t._v("LocalDate")]),t._v(' class for simplified (and more performant) dealing with "just Dates without\ntime information". Similar to Java\'s '),a("code",[t._v("LocalDate")]),t._v(". It allows "),a("strong",[t._v("much more")]),t._v(" simple and robust\nimplementation, compared to dealing with js "),a("code",[t._v("Date")]),t._v(" object intricacies (mostly around timezones).")])]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("p",[t._v("API is designed to be closely (but not 100%) compatible with Day.js/Moment.js.")]),t._v(" "),a("p",[t._v("Examples:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("day.js (via time-lib)")]),t._v(" "),a("th",[t._v("LocalTime")]),t._v(" "),a("th",[t._v("LocalDate")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("now")]),t._v(" "),a("td",[t._v("dayjs()")]),t._v(" "),a("td",[t._v("localTime()")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("today")]),t._v(" "),a("td",[t._v("dayjs().startOf('day')")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("localDate()")])]),t._v(" "),a("tr",[a("td",[t._v("create from unixtimestamp")]),t._v(" "),a("td",[t._v("dayjs.unix(ts)")]),t._v(" "),a("td",[t._v("localTime(ts)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("parse from ISO8601 date string")]),t._v(" "),a("td",[t._v("dayjs(str)")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("localDate(str)")])]),t._v(" "),a("tr",[a("td",[t._v("parse from ISO8601 date+time string")]),t._v(" "),a("td",[t._v("dayjs(str)")]),t._v(" "),a("td",[t._v("localTime(str)")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("now plus 1 hour")]),t._v(" "),a("td",[t._v("dayjs().add(1, 'hour')")]),t._v(" "),a("td",[t._v("localTime().add(1, 'hour')")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("today plus 1 day")]),t._v(" "),a("td",[t._v("dayjs().startOf('day').add(1, 'day')")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("localDate().add(1, 'day')")])]),t._v(" "),a("tr",[a("td",[t._v("toISODate (just date)")]),t._v(" "),a("td",[t._v("dayjs().toISODate()")]),t._v(" "),a("td",[t._v("localTime().toISODate()")]),t._v(" "),a("td",[t._v("localDate().toISODate()")])]),t._v(" "),a("tr",[a("td",[t._v("toISODate with time")]),t._v(" "),a("td",[t._v("dayjs().format()")]),t._v(" "),a("td",[t._v("localTime().toISODateTime()")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("diff in days")]),t._v(" "),a("td",[t._v("dayjs().diff(other, 'day')")]),t._v(" "),a("td",[t._v("localTime().diff(other, 'day')")]),t._v(" "),a("td",[t._v("localDate().diff(other, 'day')")])]),t._v(" "),a("tr",[a("td",[t._v("to unixtimestamp")]),t._v(" "),a("td",[t._v("dayjs().unix()")]),t._v(" "),a("td",[t._v("localTime().unix()")]),t._v(" "),a("td",[t._v("localDate().unix()")])]),t._v(" "),a("tr",[a("td",[t._v("isBefore")]),t._v(" "),a("td",[t._v("dayjs().isBefore(other)")]),t._v(" "),a("td",[t._v("localTime().isBefore(other)")]),t._v(" "),a("td",[t._v("localDate().isBefore(other)")])])])]),t._v(" "),a("p",[t._v("As you can see above - API is kept very similar.")]),t._v(" "),a("h2",{attrs:{id:"dateinterval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dateinterval"}},[t._v("#")]),t._v(" DateInterval")]),t._v(" "),a("p",[t._v("Useful to describe an interval of Dates, e.g [inclusive] interval between "),a("code",[t._v("1984-06-21")]),t._v(" and\n"),a("code",[t._v("1984-07-11")]),t._v(" can be described as "),a("code",[t._v("1984-06-21/1984-07-11")]),t._v(" (as per\n"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/ISO_8601#Time_intervals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ISO8601"),a("OutboundLink")],1),t._v(").")]),t._v(" "),a("p",[a("code",[t._v(".toJSON")]),t._v(" automatically stringifies DateInterval into a string.")]),t._v(" "),a("p",[t._v("Create DateInterval: "),a("code",[t._v("DateInterval.parse('1984-06-21/1984-07-11')")]),t._v(" or\n"),a("code",[t._v("DateInterval.of('1984-06-21', '1984-07-11')")]),t._v(".")])])}),[],!1,null,null,null);e.default=i.exports}}]);